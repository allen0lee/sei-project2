<%# list one user's all albums and unarchived photos %>

<div class="dashboard-albums-container"> 
  <div class="display-box"></div>

  <div class="create-album">  
    <button class="button show-create-albums-btn" onclick="openCreateAlbumForm()">create album</button>
  </div>
</div>

<div class="prev-next">
  <a class="prev-8-albums">prev</a>
  <span class="albums-page">1</span>
  <a class="next-8-albums">next</a>
</div>

<div class="create-album-form">
  <span class="close-create-album-form-btn">&times</span>
  
  <div>
    <label for="">name</label>
    <input class="theme-image-name" type="text" name="name" required>    
  </div>
  
  <div>
    <label for="">theme image url</label>
    <input class="theme-image-url" type="text" name="theme_image_url" required>   
  </div>

  <div>
    <button class="button create-album-btn" onclick="closeCreateAlbumForm()">create album</button>
  </div>
</div>


<div class="dashboard-photos-container"> 
  <div class="display-box1"></div>

  <div>
    <div class="upload-photo">
      <button class="button show-upload-photo-form" onclick="openUploadPhotoForm()">upload photo</button>
    </div>

    <div class="group-photo">
      <button class="button show-group-photo-form" onclick="openGroupPhotoForm()">group photos</button>
    </div>
  </div>
</div>

<div class="prev-next">
  <a class="prev-12-photos">prev</a>
  <span class="photos-page">1</span>
  <a class="next-12-photos">next</a>
</div>

<div class="upload-photo-form">
  <span class="close-upload-photo-form-btn">&times</span>
  
  <div>
    <label for="">name</label>
    <input class="image-name" type="text" name="name" required>    
  </div>
  
  <div>
    <label for="">image url</label>
    <input class="image-url" type="text" name="image_url" required>   
  </div>

  <div>
    <button class="button upload-photo-btn" onclick="closeUploadPhotoForm()">upload photo</button>
  </div>
</div>

<div class="group-photo-form">
  <span class="close-group-photo-form-btn">&times</span>

<%# Array.from(document.querySelector('#albums').options).find(option => option.selected).dataset.albumId %>
  <div>
    <label for="">choose album</label>
    <select class="albums-list"></select>
  </div>

  <div>
    <button class="button group-photo-btn" onclick="closeGroupPhotoForm()">group photos</button>
  </div>
</div>

<div class="enlarged-image-container">
    <span class="close-image-btn">&times</span>
    <img id="enlargedImg">
</div>


<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<script>
  let createAlbumForm = document.querySelector('.create-album-form')
  const openCreateAlbumForm = () => {
    document.querySelector('.theme-image-name').value = '' // clear input field each time open
    document.querySelector('.theme-image-url').value = ''
    createAlbumForm.style.display = 'block'
    let span = document.querySelector('.close-create-album-form-btn')
    span.onclick = () => { 
      createAlbumForm.style.display = 'none'
    }
  }

  let uploadPhotoForm = document.querySelector('.upload-photo-form')
  const openUploadPhotoForm = () => {
    document.querySelector('.image-name').value = '' // clear input field each time open
    document.querySelector('.image-url').value = ''
    uploadPhotoForm.style.display = 'block'
    let span = document.querySelector('.close-upload-photo-form-btn')
    span.onclick = () => { 
      uploadPhotoForm.style.display = 'none'
    }
  }

  let groupPhotoForm = document.querySelector('.group-photo-form')
  const openGroupPhotoForm = () => {
    groupPhotoForm.style.display = 'block'
    let span = document.querySelector('.close-group-photo-form-btn')
    span.onclick = () => { 
      groupPhotoForm.style.display = 'none'
    }
  }

  let displayBox1 = document.querySelector('.display-box1')
  const enlargeImage = (event) => {
    let enlargedImageBackground = document.querySelector('.enlarged-image-container')
    if(event.target.classList.contains('img')) {
      let enlargeImg = document.getElementById('enlargedImg')
      enlargedImageBackground.style.display = 'block'
      let imgHolder = event.target.closest('.img-holder')
      enlargeImg.src = imgHolder.querySelector('.img').src
    }
    let span = document.querySelector('.close-image-btn')
    span.onclick = () => { 
      enlargedImageBackground.style.display = 'none'
    }
  }
  displayBox1.addEventListener('click', enlargeImage)

  async function getAllAlbums() {
    const options = {
      url: `/api/albums/<%= @user_id %>`,
      method: 'get'
    } 
    return await $.ajax(options)
  }

  let loadNext8Albums = document.querySelector('.next-8-albums')
  let loadPrev8Albums = document.querySelector('.prev-8-albums')
  let displayBox = document.querySelector('.display-box')
  let albumsOffset = 8 
  let albumsPage = 1    // increase up to 10, assuming user can have max 8*10=80 albums?
  let albumsPerPage = 8

  const requestAlbums = (albumsOffset, albumsPage) => {
    const options = {
      url: `/api/albums/<%= @user_id %>/${albumsOffset * albumsPage}/${albumsPage}`,
      method: 'get'
    }
    $.ajax(options).done(res => {
      displayBox.querySelectorAll('article').forEach(album => { // clear prev 8 albums
        album.remove()
      })  
      for(let i = 0; i < res.length; i++) {             // show 8 albums
        let article = document.createElement('article')
        displayBox.append(article)
        article.innerHTML = 
        `<div class="album-container">
          <img src="${res[i].theme_image_url}" alt="">
          <div class="album-name">
            <a href="/photos/${res[i].name}/${res[i].id}">
              ${res[i].name}
            </a>
          </div>
        </div>`
      }
    })    
  }

  // 1st request - show first 8 albums
  requestAlbums(albumsOffset, albumsPage)

  const handleNext8Albums = () => {
    getAllAlbums().then(res => {
      let numOfAlbums = res.length
      // console.log(numOfAlbums)
      let lastPage = Math.ceil(numOfAlbums/albumsPerPage) // max set to 10 ?
      if(albumsPage < lastPage) {
        albumsPage += 1
        let setAlbumsPage = document.querySelector('.albums-page')
        setAlbumsPage.textContent = albumsPage
      }
      requestAlbums(albumsOffset, albumsPage)
    })
  }
  loadNext8Albums.addEventListener('click', handleNext8Albums)

  const handlePrev8Albums = () => {
    if(albumsPage > 1) {
      albumsPage -= 1
      let setAlbumsPage = document.querySelector('.albums-page')
      setAlbumsPage.textContent = albumsPage
    }
    requestAlbums(albumsOffset, albumsPage)
  }
  loadPrev8Albums.addEventListener('click', handlePrev8Albums)


  let createAlbumBtn = document.querySelector('.create-album-btn')
  const handleCreateAlbum = () => {
    $.ajax({
      url: '/albums/<%= @user_id %>',
      method: 'post',
      data: {
        user_id: <%= @user_id %>,
        name: document.querySelector('.theme-image-name').value,
        theme_image_url: document.querySelector('.theme-image-url').value 
      }
    }).done(() => {
      getAllAlbums().then(res => {
        let numOfAlbums = res.length
        console.log(numOfAlbums)
        let lastPage = Math.ceil(numOfAlbums/albumsPerPage)
        albumsPage = lastPage // update page number
        requestAlbums(albumsOffset, lastPage)
      })
    })
  }
  createAlbumBtn.addEventListener('click', handleCreateAlbum)

  closeCreateAlbumForm = () => { 
    createAlbumForm.style.display = 'none'
  }


  let loadNext12Photos = document.querySelector('.next-12-photos')
  let loadPrev12Photos = document.querySelector('.prev-12-photos')
  let photosOffset = 12 
  let photosPage = 1    // increase up to 10
  let photosPerPage = 12

  const requestPhotos = (photosOffset, photosPage) => {
    const options = {
      url: `/api/photos/<%= @user_id %>/${photosOffset * photosPage}/${photosPage}`,
      method: 'get'
    }
    $.ajax(options).done(res => {
      displayBox1.querySelectorAll('article').forEach(photo => { // clear display area for redraw
        photo.remove()
      }) 
      for(let i = 0; i < res.length; i++) {             // draw 12 photos
        let article = document.createElement('article')
        displayBox1.append(article)
        article.innerHTML = 
        `<div class="photo-display">
          <div class="img-holder">
            <img class="img" src="${res[i].image_url}" alt="">
          </div>
          <div data-photo-id="${res[i].id}" class="photo-name" onclick="selectPhoto(this)">
            <a href="/photos/${res[i].id}">
              ${res[i].name}
            </a>
          </div>
        </div>`
      }
    })
  }

  // 1st request - show first 12 unarchived photos
  requestPhotos(photosOffset, photosPage)

  async function getNumOfAllPhotos() {
    const options = {
      url: `/api/photos/<%= @user_id %>`,
      method: 'get'
    } 
    return await $.ajax(options)
  }

// upload unarchived photos - photos not grouped in album yet
  let uploadPhotoBtn = document.querySelector('.upload-photo-btn')
  const handleUploadPhoto = () => {
    $.ajax({
      url: '/photos/<%= @user_id %>',
      method: 'post',
      data: {
        user_id: <%= @user_id %>,
        name: document.querySelector('.image-name').value,
        image_url: document.querySelector('.image-url').value 
      }
    }).done(() => {
      getNumOfAllPhotos().then(res => {
        let numOfPhotos = res.num_of_photos
        console.log(numOfPhotos)
        let lastPage = Math.ceil(numOfPhotos/photosPerPage)
        photosPage = lastPage // update page number
        requestPhotos(photosOffset, lastPage)
      })
    })
  }
  uploadPhotoBtn.addEventListener('click', handleUploadPhoto)

  closeUploadPhotoForm = () => { 
    uploadPhotoForm.style.display = 'none'
  }

  const handleNext12Photos = () => {
    getNumOfAllPhotos().then(res => {
      let numOfPhotos = res.num_of_photos
      console.log(numOfPhotos)
      let lastPage = Math.ceil(numOfPhotos/photosPerPage) // max is 10
      if(photosPage < lastPage) {
        photosPage += 1
        let setPhotosPage = document.querySelector('.photos-page')
        setPhotosPage.textContent = photosPage
      }
      requestPhotos(photosOffset, photosPage)
    })
  }
  loadNext12Photos.addEventListener('click', handleNext12Photos)

  const handlePrev12Photos = () => {
    if(photosPage > 1) {
      photosPage -= 1
    }
    requestPhotos(photosOffset, photosPage)
  }
  loadPrev12Photos.addEventListener('click', handlePrev12Photos)

  const selectPhoto = (photo) => {
    photo.classList.toggle('selected')
  }

  let groupPhotoBtn = document.querySelector('.group-photo-btn')
  const handleGroupPhotos = () => {
    let selectedPhotos = document.querySelectorAll('.selected')
    let selectedAlbumId = document.querySelector('.albums-list').value
    let selectedPhotosIds = Array.from(selectedPhotos).map(photo => photo.getAttribute('data-photo-id')) // ["255", "256"]
    $.ajax({
      url: `/photos-move-in-album`, 
      method: 'put',
      data: {
        id: selectedPhotosIds, // array of selected photos' ids
        album_id: selectedAlbumId
      }
    }).done(() => {
      getNumOfAllPhotos().then(res => {
        let numOfPhotos = res.num_of_photos
        console.log(numOfPhotos)
        let lastPage = Math.ceil(numOfPhotos/photosPerPage)
        photosPage = lastPage // update page number
        requestPhotos(photosOffset, lastPage)
      })
    })  
  }
  groupPhotoBtn.addEventListener('click', handleGroupPhotos)

  closeGroupPhotoForm = () => { 
    groupPhotoForm.style.display = 'none'
  }

  let showGroupPhotoFormBtn = document.querySelector('.show-group-photo-form')
  const handleGetAllAlbums = () => {
    getAllAlbums().then(res => {
      let albums = res
      let albumsList = document.querySelector('.albums-list')
      for(let i = 0; i < res.length; i++) {
        let option = document.createElement('option')
        albumsList.append(option)
        option.value = res[i].id
        option.textContent = res[i].name
      }
    })
  }
  showGroupPhotoFormBtn.addEventListener('click', handleGetAllAlbums) 

</script>































<%# all photos in one album with 'upload photo' button%>

<div class="label">album owner: <%= @album_owner %></div> 

<div class="all-photos-container">
    <div class="display-box"></div>

  <%# upload photo button should show to album owner, hidden for not album owner %>
  <% if @user_id == @album.user_id  %>
    <div>
      <div class="upload-photo">
        <button class="button show-upload-photo-form" onclick="openUploadPhotoForm()">upload photo</button>
      </div>

      <div class="ungroup-photo">
        <button class="button ungroup-photo-btn">move out album</button>
      </div>
    </div>
  <% elsif @user_id != @album.user_id && @user_id != nil %>
    <div class="bookmark-photos">
      <button class="button bookmark-photos-btn">bookmark photos</button>
    </div>
  <% end %>
</div>

<div class="prev-next">
  <a class="prev-12-photos">prev</a>
  <span class="page">1</span><span class="total-page">/<%= @album_pages %></span>
  <a class="next-12-photos">next</a>
</div>

<div class="upload-photo-form">
  <span class="close-upload-photo-form-btn">&times</span>
  
  <div>
    <label for="">name</label>
    <input class="image-name" type="text" name="name" required>    
  </div>
  
  <div>
    <label for="">image url</label>
    <input class="image-url" type="text" name="image_url" required>   
  </div>

  <div>
    <button class="button upload-photo-btn" onclick="closeUploadPhotoForm()">upload photo</button>
  </div>
</div>

<div class="enlarged-image-container">
  <span class="close-image-btn">&times</span>
  <img id="enlargedImg">
</div>


<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<script>
  let displayBox = document.querySelector('.display-box')
  const enlargeImage = (event) => {
    let enlargedImageBackground = document.querySelector('.enlarged-image-container')
    if(event.target.classList.contains('img')) {
      let enlargeImg = document.getElementById('enlargedImg')
      enlargedImageBackground.style.display = 'block'
      let imgHolder = event.target.closest('.img-holder')
      enlargeImg.src = imgHolder.querySelector('.img').src
    }
    let span = document.querySelector('.close-image-btn')
    span.onclick = () => { 
      enlargedImageBackground.style.display = 'none'
    }
  }
  displayBox.addEventListener('click', enlargeImage)

  let uploadPhotoForm = document.querySelector('.upload-photo-form')
  const openUploadPhotoForm = () => {
    document.querySelector('.image-name').value = '' // clear input field each time open
    document.querySelector('.image-url').value = ''
    uploadPhotoForm.style.display = 'block'
    let span = document.querySelector('.close-upload-photo-form-btn')
    span.onclick = () => { 
      uploadPhotoForm.style.display = 'none'
    }
  }

  let loadNext12Photos = document.querySelector('.next-12-photos')
  let loadPrev12Photos = document.querySelector('.prev-12-photos')
  let offset = 12 
  let page = 1    
  let photosPerPage = 12

  const requestPhotos = (offset, page) => {
    const options = {
      url: `/api/photos/<%= @album_name %>/<%= @album_id %>/${offset * page}/${page}`,
      method: 'get'
    }
    $.ajax(options).done(res => {
      displayBox.querySelectorAll('article').forEach(photo => { // clear prev 12 photos
        photo.remove()
      })
      if(res != null) {
        for(let i = 0; i < res.length; i++) {             // draw 12 photos
          let article = document.createElement('article')
          displayBox.append(article)
          article.innerHTML = 
          `<div class="photo-display">
            <div data-photo-id="${res[i].id}" class="img-holder">
              <img class="img" src="${res[i].image_url}" alt="">
              <div class="panel">
                <a class="select" onclick="selectPhoto(this)">select &nbsp</a>
                <a class="to-comment" href="/photos/${res[i].id}">comment &nbsp</a>
                <% if @user_id == @album.user_id  %>
                  <a data-photo-id="${res[i].id}" class="delete" onclick="deletePhoto(this)">delete</a>
                <% end %>
              </div>
            </div>
          </div>`
        }
      } 
    })
  }

  // 1st request - show first 12 photos
  requestPhotos(offset, page)

  <% if @album_pages == 1 %>
    loadNext12Photos.style.display = 'none'
  <% end %>

  async function getNumOfAllPhotos() {
    const options = {
      url: `/api/photos/<%= @album_name %>/<%= @album_id %>`,
      method: 'get'
    } 
    return await $.ajax(options)
  }

  // async function getNumOfAllUnarchivedPhotos() {
  //   const options = {
  //     url: `/api/photos/<%= @user_id %>`,
  //     method: 'get'
  //   } 
  //   return await $.ajax(options)
  // }

  let setPage = document.querySelector('.page')
  let setTotalPage = document.querySelector('.total-page')
  const handleNext = () => {
    // need to make new request to get the number of all photos
    getNumOfAllPhotos().then(res => {
      let numOfPhotos = res.num_of_photos
      let lastPage = Math.ceil(numOfPhotos/photosPerPage) 
      if(page < lastPage) {
        loadNext12Photos.style.display = 'inline-block'
        loadPrev12Photos.style.display = 'inline-block'
        page += 1
        setPage.textContent = page
        setTotalPage.textContent = `/${lastPage}`
        if(page == lastPage) {
          loadNext12Photos.style.display = 'none' // disable 'next'
        }
      }
      requestPhotos(offset, page)
    })
  }

  const handlePrev = () => {
    if(page > 1) {
      loadNext12Photos.style.display = 'inline-block'
      loadPrev12Photos.style.display = 'inline-block'
      page -= 1
      setPage.textContent = page
      if(page == 1) {
        loadPrev12Photos.style.display = 'none' // disable 'prev'
      }
    }
    requestPhotos(offset, page)
  }

  loadNext12Photos.addEventListener('click', handleNext)
  loadPrev12Photos.addEventListener('click', handlePrev)

  let uploadPhotoBtn = document.querySelector('.upload-photo-btn')
  const handleUploadPhoto = () => {
    let userId = <%= @user_id %>
    <% if !logged_in? %>
      userId = null
    <% end %>

    $.ajax({
      url: '/photos/<%= @album_id %>/<%= @user_id %>',
      method: 'post',
      data: {
        album_id: <%= @album_id %>,
        user_id: userId,
        name: document.querySelector('.image-name').value,
        image_url: document.querySelector('.image-url').value,
        latest_image_url: document.querySelector('.image-url').value // for album to keep track of the latest image; for local image upload, find it and make post request in callback   
      }
    }).done(() => {
      getNumOfAllPhotos().then(res => {
        let numOfPhotos = res.num_of_photos
        let lastPage = Math.ceil(numOfPhotos/photosPerPage)
        page = lastPage // update page number
        requestPhotos(offset, lastPage) // always go to last page to see the change
        setPage.textContent = lastPage
        setTotalPage.textContent = `/${lastPage}`
        loadNext12Photos.style.display = 'none' // last page has no 'next'
        if(lastPage > 1) {
          loadPrev12Photos.style.display = 'inline-block'
        }
      })
    })
  }
  uploadPhotoBtn.addEventListener('click', handleUploadPhoto)

  closeUploadPhotoForm = () => { 
    uploadPhotoForm.style.display = 'none'
  }

  const selectPhoto = (photo) => {
    photo.closest('.img-holder').classList.toggle('selected')
  }

  let ungroupPhotoBtn = document.querySelector('.ungroup-photo-btn')
  const handleUngroupPhotos = () => {
    let userId = <%= @user_id %>
    <% if !logged_in? %>
      userId = null
    <% end %>

    let selectedPhotos = document.querySelectorAll('.selected')
    let selectedPhotosIds = Array.from(selectedPhotos).map(photo => photo.getAttribute('data-photo-id')) // ["255", "256"]
    $.ajax({
      url: `/photos-move-out-album`, 
      method: 'put',
      data: {
        id: selectedPhotosIds, // array of selected photos' ids
        album_id: null,
        user_id: userId
      }
    }).done(() => {
      // // how to redirect to dashboard and then go to unarchived photos last page
      // if (response.redirect != undefined && response.redirect) {
      //   window.location.href = response.redirect_url
      //   // go to unarchived photos last page
      //   getNumOfAllUnarchivedPhotos().then(res => {
      //     let numOfPhotos = res.num_of_photos
      //     let lastPage = Math.ceil(numOfPhotos/photosPerPage)
      //     page = lastPage // update page number
      //     requestPhotos(offset, lastPage)        
      //   })
      // }

      // stay in current page 
      getNumOfAllPhotos().then(res => {
        let numOfPhotos = res.num_of_photos
        let lastPage = Math.ceil(numOfPhotos/photosPerPage)
        if(page >= lastPage) {
          page = lastPage // update page number
          requestPhotos(offset, page)
          setPage.textContent = page
          setTotalPage.textContent = `/${lastPage}`
          if(page == 1) {
            loadPrev12Photos.style.display = 'none'
            loadNext12Photos.style.display = 'none'
          }
        } else if(page <= lastPage) {
          requestPhotos(offset, page)
          setPage.textContent = page
          setTotalPage.textContent = `/${lastPage}`
        }
      })
    })  
  }
  <% if logged_in?  && @user_id == @album.user_id %>
    ungroupPhotoBtn.addEventListener('click', handleUngroupPhotos) 
  <% end %>

  const deletePhoto = (photo) => {
    let photoId = photo.getAttribute('data-photo-id')
    $.ajax({
      url: `/photos/${photoId}/<%= @album_id %>`,
      method: 'delete',
      data: {
        id: photoId,
        album_id: <%= @album_id %>
      }
    }).done(() => {
      // stay in current page 
      getNumOfAllPhotos().then(res => {
        let numOfPhotos = res.num_of_photos
        let lastPage = Math.ceil(numOfPhotos/photosPerPage)
        if(page >= lastPage) {
          page = lastPage // update page number
          requestPhotos(offset, page)
          setPage.textContent = page
          setTotalPage.textContent = `/${lastPage}`
          if(page == 1) {
            loadPrev12Photos.style.display = 'none'
            loadNext12Photos.style.display = 'none'
          }
        } else if(page <= lastPage) {
          requestPhotos(offset, page)
          setPage.textContent = page
          setTotalPage.textContent = `/${lastPage}`
        }
      })
    })
  }

</script>


